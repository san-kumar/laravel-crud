import{_ as e,c as s,o as a,a as n}from"./app.ca73af7b.js";const y=JSON.parse('{"title":"Relational tables and nesting","description":"","frontmatter":{},"headers":[{"level":2,"title":"Example #1","slug":"example-1","link":"#example-1","children":[]},{"level":2,"title":"Example #2","slug":"example-2","link":"#example-2","children":[]}],"relativePath":"guide/nesting.md"}'),t={name:"guide/nesting.md"},o=n(`<h1 id="relational-tables-and-nesting" tabindex="-1">Relational tables and nesting <a class="header-anchor" href="#relational-tables-and-nesting" aria-hidden="true">#</a></h1><p>In addition to generating simple CRUD for a single table, you can also generate CRUD for tables related to each other.</p><h2 id="example-1" tabindex="-1">Example #1 <a class="header-anchor" href="#example-1" aria-hidden="true">#</a></h2><p>For example, let&#39;s say we have the following tables:</p><ul><li>Authors <ul><li>Posts <ul><li>Comments</li></ul></li></ul></li></ul><p>To generate CRUD for these tables you can use the dot notation to specify the parent tables like this: <code>authors.posts.comments</code>.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#89DDFF;">\`\`\`</span><span style="color:#FFCB6B;">bash</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Create CRUD for authors table</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#C3E88D;"> php artisan crud:generate authors</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Create CRUD for posts table</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#C3E88D;"> php artisan crud:generate authors.posts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Create CRUD for comments table</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#C3E88D;"> php artisan crud:generate authors.posts.comments</span></span>
<span class="line"></span></code></pre></div><p>This will generate CRUD files for the <code>authors</code> table, so you can view, create, edit and delete authors using the <code>/authors</code> route.</p><p>Then for each author, you can view, create, edit and delete posts using the <code>/authors/{author}/posts</code> route.</p><p>And for each post, you can view, create, edit and delete comments using the <code>/authors/{author}/posts/{post}/comments</code> route.</p><h2 id="example-2" tabindex="-1">Example #2 <a class="header-anchor" href="#example-2" aria-hidden="true">#</a></h2><p>On the other hand, if you want to generate CRUD for the <code>posts</code> table without nesting it under the <code>authors</code> route, you can do this:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Create CRUD for posts table</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">php</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">artisan</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">crud:generate</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">posts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Create CRUD for comments table</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">php</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">artisan</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">crud:generate</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">posts.comments</span></span>
<span class="line"></span></code></pre></div><p>So now you can view, create, edit and delete all posts regardless of the author using the <code>/posts</code> route and then for each post, you can view, create, edit and delete comments using the <code>/posts/{post}/comments</code> route.</p>`,14),l=[o];function p(r,c,i,d,h,u){return a(),s("div",null,l)}const m=e(t,[["render",p]]);export{y as __pageData,m as default};
